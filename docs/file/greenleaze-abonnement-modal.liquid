<link href="https://fonts.cdnfonts.com/css/baloo" rel="stylesheet">
<script>
  
  
const modalContent = `

<div id="modal-abonnement--greenleaze" class="modal-greenleaze " style="z-index:99999999">
    <div class="modal-content-abonnement-greenleaze">
      
        <div class="modal-container-greenleaze" style="display: flex;padding: 40px;">
           <button id="close-modal-greenleaze" type="button" class="btn-close-modal-greenleaze">&times;</button>
            <div class="left-greenleaze">
                <h3 class="title-modal-greenleaze">Votre abonnement tout compris avec <span style="color: #0D5537;">GreenLeaze <img style="margin-left-greenleaze:5px;" src="{{ 'logo-greenleaze-small-fond-blanc.svg' | file_url }}" alt="greenleaze logo" width="50" height="auto"></span></h3>
                <div class="text-modal-greenleaze">
                    <div class="advantage-greenleazes-container">
                      <div class="advantage-greenleaze">
                        <div class="advantage-greenleaze-illustration">
                              <img src="{{ 'greenleaze-illustration-casse-vol.svg' | file_url }}" alt="illustration bike" width="40px" height="40px">
                        </div>
                        <div class="advantage-greenleaze-description"> Garantie casse / vol offerte
                        </div>
                      </div>
                      <div class="advantage-greenleaze">
                        <div class="advantage-greenleaze-illustration">
                              <img src="{{ 'greenleaze-illustration-franchise.svg' | file_url }}" alt="illustration bike" width="40px" height="40px">
                        </div>
                        <div class="advantage-greenleaze-description"> 0 € de franchise
                        </div>
                      </div>
                      <div class="advantage-greenleaze">
                        <div class="advantage-greenleaze-illustration">
                              <img src="{{ 'greenleaze-illustration-bike.svg' | file_url }}" alt="illustration bike" width="40px" height="40px">
                        </div>
                        <div class="advantage-greenleaze-description"> Remboursé par votre employeur
                        </div>
                      </div>
                      <div class="advantage-greenleaze">
                        <div class="advantage-greenleaze-illustration">
                              <img src="{{ 'greenleaze-illustration-replacement.svg' | file_url }}" alt="illustration bike" width="40px" height="40px">
                        </div>
                        <div class="advantage-greenleaze-description"> Remplacement en 48h
                        </div>
                      </div>
                    </div>
                </div>
              
            </div>
            <div class="right-greenleaze">
                <div class="table-greenleaze">
                  <div class="alignement-greenleaze">
                    <div id="paiementMensuelCartLabelContainer" class="lines">
                      <span>Paiement mensuel</span>
                    </div>
                    <div id="paiementMensuelCartPriceContainer" class="lines">
                      <span id="paiementMensuel"></span>
                    </div>
                  </div>
                  <div class="alignement-greenleaze">
                    <div id="apportInitialCartLabelContainer" class="lines">
                      <span>Apport initial</span>
                    </div>
                    <div id="apportInitialCartPriceContainer" class="lines">
                      <span id="apportInitial"></span>
                    </div>
                  </div>
                  <hr style="margin-top: 20px;margin-bottom:20px;border: 1px solid black;height:0px;"/>
                  <div class="alignement-greenleaze">
                    <span>A payer aujourd'hui</span>
                    <span id="paidToday"></span>
                  </div>
                </div>
                 <div class="slider-container-greenleaze">
                    <input type="range" id="monthSlider-greenleaze" min="0" max="3" step="any" value="0">
                    <div class="slider-labels-greenleaze">
                        <span>1 mois</span
                        <span>12 mois</span>
                        <span>24 mois</span>
                        <span>36 mois</span>
                    </div>

                </div>
               <div style="text-align:center; display:flex;flex-direction:column;">
                  <button class="buttonOrder" onclick="order()">S'abonner</button>
                  <div id="greenleaze-error"></div>
                </div>
              </div>
              
            </div>
           
        </div>

    </div>
`

  if (!document.querySelector('.modal-abonnement--greenleaze')) {
    
    // Append it to the body or desired container
    const modalContainer = document.createElement('div');
    
    // Insert the modal content string as HTML
    modalContainer.innerHTML = modalContent;
    
    // Append the modal to the body or desired container
    document.body.appendChild(modalContainer);
}
</script>
<style>
  @keyframes button-loading-spinner {
  from {
    transform: rotate(0turn);
  }

  to {
    transform: rotate(1turn);
  }
}

  #greenleaze-error {
    font-style: italic;
  }
  .display-none {
    display: none;
  }
  .advantage-greenleazes-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
    background-color: rgba(208, 230, 229, 0.15);
    border-radius: 30px;
    padding: 20px;
  }
  .advantage-greenleaze {
    display: flex;
    flex-direction: row;
    gap:20px;
    align-items: center;
  }
  .advantage-greenleaze-illustration {
      background-color: hsl(155, 73%, 20%);
      width: 40px;
      height: 40px;
      padding: 10px;
      border-radius: 5px;
      display: flex;
      justify-content: center;
      align-items: center;
  }
  .button-abonnement {
    align-items: center;
    appearance: none;
    background-color: #0D5537;
    border-radius: 24px;
    border-style: none;
    box-sizing: border-box;
    color: #fff;
    cursor: pointer;
    display: inline-flex;
    fill: currentcolor;
    font-family: "Google Sans",Roboto,Arial,sans-serif;
    font-size: 14px;
    font-weight: 500;
    height: 100%;
    justify-content: center;
    letter-spacing: .25px;
    line-height: normal;
    max-width: 100%;
    overflow: visible;
    padding: 17px 20px;
    position: relative;
    text-align: center;
    text-transform: none;
    transition: box-shadow 280ms cubic-bezier(.4, 0, .2, 1),opacity 15ms linear 30ms,transform 270ms cubic-bezier(0, 0, .2, 1) 0ms;
    -webkit-user-select: none;
    touch-action: manipulation;
    width: 100%;
    will-change: transform,opacity;
    z-index: 0;
  }
  button.button-abonnement::before {
    background-color: #0D5537;
    background: #0D5537;
  }
  button.button-abonnement:hover:before  {
    background-color: #0D5537 !important;
    background: #0D5537 !important;
  }


    .ml-007 {
      margin-left: 0.7em;
    }

    .ml-5 {
      margin-left: 5em;
    }

    .mt-2 {
      margin-top: 2em;
    }

    .mt-3 {
      margin-top: 3.5em;
    }

      .left-greenleaze {
          width: 50%;
      }

      .right-greenleaze {
         display: flex;
          width: 50%;
        gap: 10px;
       
        flex-direction: column;
        justify-content: space-between;
      }
  .center {
      display: flex;
      align-items: center;
      justify-content: center;
    }

      .buttonOrder {
          border-radius: 10px;
          background: #0D5537;
          font-size: 23px;
          letter-spacing: 1px;
          color: white;
          border: 0;
          padding-top: 10px;
          padding-bottom: 10px;
          padding-left: 20px;
          padding-right: 20px;
          cursor: pointer;
          font-style: normal;
          font-weight: 600;
          line-height: normal;
        position: relative;
      }

      .modal-greenleaze  {
          display: none; /* Hidden by default */
          position: fixed; /* Stay in place */
          z-index: 1; /* Sit on top */
          left: 0;
          top: 0;
          width: 100%; /* Full width */
          height: 100%; /* Full height */
          overflow: auto; /* Enable scroll if needed */
          background-color: rgb(0, 0, 0); /* Fallback color */
          background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
          padding: 20px; /* Ajout d'un padding pour éviter que le contenu touche les bords */

      }

      .modal-content-abonnement-greenleaze {
          background-color: #fff; /* White background */
          margin: 5vh auto; /* 10% from the top and centered */
          padding: 20px; /* Padding inside the modal box */
          border: 1px solid #888; /* Gray border */
          width: 900px; /* Adjust based on screen size */
          border-radius: 20px;
          max-height: 90vh; /* Limite la hauteur de la modal à 90% de la hauteur de l'écran */
          overflow-y: auto; /* Ajoute un défilement si le contenu dépasse la hauteur maximale */
          position: relative; /* Pour le positionnement absolu du bouton de fermeture */

      }

       .btn-close-modal-greenleaze {
          position: absolute;
          top: 10px;
          right: 20px;
          color: #aaa;
          border: none;
          font-size: 28px;
          font-weight: bold;
          cursor: pointer;
           background-color: transparent;
         outline:none;
      }

      .btn-close-modal-greenleaze:hover,
      .btn-close-modal-greenleaze:focus {
          color: black;
          text-decoration: none;
          cursor: pointer;
      }

      .slider-container-greenleaze {
          width: "100%"; /* Match or exceed the width of the slider */
          text-align: center; /* Center the slider within the container */
      }

      #monthSlider-greenleaze {
          -webkit-appearance: none;
          appearance: none;
          width: 100%;
          height: 10px;
          background: transparent;
          background-color: #D0E6E5;
          border-radius: 20px;
          outline: none;
          transition: opacity .2s;
        padding:0;
      }

      #monthSlider-greenleaze:hover {
          opacity: 1;
      }

      #monthSlider-greenleaze::-webkit-slider-thumb {
          -webkit-appearance: none;
          appearance: none;
          width: 25px;
          height: 25px;
          background: #0D5537 url({{ 'logo-greenleaze-slider.svg' | file_url }}) no-repeat center;
          cursor: pointer;
          border-radius: 50%;
          background-size: 60%;
          color: white;
          font-size: 16px;
          text-align: center;
          line-height: 25px;
      }

      #monthSlider-greenleaze::-moz-range-greenleaze-thumb {
          -webkit-appearance: none;
          appearance: none;
          width: 25px;
          height: 25px;
          background: #0D5537 url({{ 'logo-greenleaze-slider.svg' | file_url }}) no-repeat center;
          cursor: pointer;
          border-radius: 50%;
          background-size: 60%;
          color: white;
          font-size: 16px;
          text-align: center;
          line-height: 25px;
      }

      #sliderValue {
          margin-top: 20px;
          font-size: 20px;
          color: #333;
      }

      .slider-labels-greenleaze {
          font-weight: 400;
          font-size: 13px;
          line-height: 15.6px;
          display: flex;
          justify-content: space-between;
          padding: 10px 0;
      }

      .slider-labels-greenleaze span {
          color: #000;
          font-size: 13px;
          font-style: normal;
          font-weight: 400;
          line-height: normal;

      }

      .text-modal-greenleaze {
          display: flex;
      }

      .abo-title {
          font-size: 23px;
          font-weight: 700;
          line-height: 27.6px;
          text-align: center;
          margin-top: 47px;
      }

      .title-modal-greenleaze {
          font-size: 23px;
          font-weight: 900;
          line-height: 27.6px;
          text-align: left;
          margin-top: 0;

      }

      .table-greenleaze {
          font-size: 20px;
          font-weight: 400;
          line-height: 36.2px
      }


    .detail {
      font-size: 12px;
      line-height: 14px;
    }
      .button--loading {
      color: transparent;
    }
    .button--loading::after {
      content: "";
      position: absolute;
      width: 16px;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      height: 20px;
      margin: auto;
      border: 2px solid transparent;
      border-top-color: #ffff;
      border-radius: 50%;
      animation: button-loading-spinner 1s ease infinite;
    }



   .modal-container-greenleaze {
      display: flex;
      flex-wrap: wrap;
    }
  
      @media screen and (max-width: 1000px) {

        .modal-greenleaze  {
           width: 100%;
          padding: 0px;
          margin: 0px;
          heigth: 100vh;
        }
        .modal-abonnement--greenleaze {
          width: 100%;
          heigth: 100vh;

        }
        .modal-content-abonnement-greenleaze {
          width: 100%;
          height: 100vh;
          max-height: 100vh;
          margin: 0px;
          
        }
          .title-modal-greenleaze {
              font-size: 17px;
              text-align: center !important;
          }

          .title-modal-greenleaze {
              margin-top: 10px !important;
              font-size: 20px;
          }

          .table-greenleaze {
              font-family: inherit!important;
              font-size: 16px!important;
              font-weight: 100!important;
          }
          .modal-container-greenleaze {
              padding: 0px !important;
              height: 100%;
              margin: 0px;
          }

        .text-modal-greenleaze {
          justify-content: center;
        }

          .left-greenleaze {
              margin: auto !important;
              width: 100% !important;
            max-width: 700px;
          }

          .right-greenleaze {
              width: 100% !important;
              max-width: 700px;
              
          }
      }
   .alignement-greenleaze {
      display: flex;
      justify-content: space-between;
      width: 100%;
    }

     .modal-content-abonnement-greenleaze .alignement-greenleaze .lines:first-child,  .modal-content-abonnement-greenleaze .alignement-greenleaze .lines:first-child .detail {
        text-align: left-greenleaze;
    }

    .modal-content-abonnement-greenleaze .alignement-greenleaze .lines:last-child ,  .modal-content-abonnement-greenleaze .alignement-greenleaze .lines:last-child .detail {
        text-align: end;
    }
    .lines .detail {
      display:flex;
      flex-direction: column;
      justify-content: end;

    }

 

    .detail {
      font-size: 12px;
      line-height: 14px;
    }

</style>


 <script type="text/javascript">


   window.addEventListener('cart_change', (e) => {
         console.log('cart changed');
        //generateparsedRulesByProductsCartObject()
  });
   
    document.getElementById("close-modal-greenleaze").addEventListener("click", function() {
        document.getElementById("modal-abonnement--greenleaze").style.display = "none";
    });


	document.addEventListener('DOMContentLoaded', async function () {
      setGreenLeazeModal()
      window.addEventListener(
          "greenleazePriceActualize",
          (e) => {
            console.log("event")
              setGreenLeazeModal()
          }
        );
     
	});

   function setErrorMessage(message) {
     const messageDiv = document.getElementById('greenleaze-error');
      console.log(message)
     if(message === "") {
      messageDiv.innerText = message;
      messageDiv.classList.add('display-none');
     } else {
       messageDiv.innerText = message;
       messageDiv.classList.remove('display-none');
     }
   }
   
     async function setGreenLeazeModal() {
      if (!initPrice) return;
        console.log("Content loaded from abonnement-modale")
        const slider = document.getElementById('monthSlider-greenleaze');
         console.log("document.querySelector('.greenleaze-button')", document.querySelector('.greenleaze-button'))
         let valueBefore = slider.value
       
  		if (slider) {
  			slider.addEventListener('input', async function () {
              const value = Math.round(slider.value)
              setBackgroundSlider(slider)
              if(value === valueBefore) return
              valueBefore = value
    		  const selectedMonth = monthValues[value]
              console.log("slider", isCart)
              if(!isCart && document.querySelector('.greenleaze-button')?.dataset?.price) {
                const prixHT = document.querySelector('.greenleaze-button').dataset.price /100 *5/6;
                updateMonthlyPayment(getRuleByProductPriceAndDuration(prixHT, selectedMonth));
              } else {
                fetchPriceModalCart(selectedMonth)
              }
  			});

          slider.addEventListener('mouseup', async function () {
              slider.value = Math.round(slider.value)
            setBackgroundSlider(slider)
  			});

          slider.addEventListener('touchend', async function () {
              slider.value = Math.round(slider.value)
            setBackgroundSlider(slider)
  			});
  		}
        await generateparsedRulesByProductsCartObject()    

        if(document.querySelector('.greenleaze-button')?.dataset?.price) {
          displayProductMainPrice(monthValues[monthValues.length - 1]);
        } 
        
      	

     }
   document.querySelectorAll('.greenleaze-button').forEach((button) => {
         button.addEventListener('click', function () {
    		document.getElementById('monthSlider-greenleaze').value = monthValues.length - 1;
    		const modal = document.querySelector('#modal-abonnement--greenleaze');
           const slider = document.getElementById('monthSlider-greenleaze');
    setBackgroundSlider(slider)
          const value = Math.round(slider.value)
          const selectedMonth = monthValues[value]
             console.log("CLICKED", button.dataset.price, selectedMonth)
          if(button.dataset.price) {
                      isCart = false

             const prixHT = button.dataset.price /100 *5/6;
                updateMonthlyPayment(getRuleByProductPriceAndDuration(prixHT, selectedMonth));
                modal.style.display = 'block';
            } else {
                isCart = true  
                fetchPriceModalCart();
                modal.style.display = 'block';

          }
  
  	})})
	function parseRule(rule, values) {
		return new Function('return ' + rule.replace(/\[\[(\w+)\]\]/g, (_, key) => values[key]));
	}

   function getRuleByProductPriceAndDuration(productPrice, duration = 36) {
      		const priceRules = rawrules['hydra:member'];
            productPriceFormat = parseFloat(productPrice)
            const rule = priceRules.find(priceRule => 
              priceRule.duration == duration && priceRule.minPrice <= productPriceFormat && priceRule.maxPrice >= productPriceFormat
            )
            return rule ? rule.rule : "0"
    }

	async function updateMonthlyPayment(rule) { 
      console.log("updating monthly payment")
		const detailSpans = document.querySelectorAll('span.detail');

        // Loop through the NodeList and remove each element
        detailSpans.forEach(span => span.remove());
		try {
                const prixHT = document.querySelector('.greenleaze-button').dataset.price /100 *5/6;
                const tva = 120 / 100;
                const calculatePayment = parseRule(rule, {tva, prixHT});
                const paiementMensuel = calculatePayment();
                const garantie = prixHT * 0.01
    			document.getElementById('paiementMensuel').innerText = paiementMensuel.toFixed(2) + ' €';
                document.getElementById('apportInitial').innerText = paiementMensuel.toFixed(2) + ' €';
                //document.getElementById('Garantie').innerText = garantie.toFixed(2) + ' €';     
                document.getElementById('paidToday').innerText = (paiementMensuel).toFixed(2) + ' €';
          
		} catch (error) {
			console.error('Failed to compute : ', error);
		}
	}

   async function fetchPriceModalCart(monthDuration = '36') {
     console.log("cart update")
    let monthlyPaiement = calculateSumTotalPrice(monthDuration);
     console.log(monthlyPaiement)
    let initialApp =
      monthlyPaiement + calculateTotalNonGreenLeaze();
    let paidToday =  monthlyPaiement + initialApp;

    document.querySelectorAll('#paiementMensuel').forEach((div) => {
      div.innerHTML = monthlyPaiement.toFixed(2) + '&nbsp;€';
    });

    document.querySelectorAll('#apportInitial').forEach((div) => {
      div.innerHTML = initialApp.toFixed(2) + '&nbsp;€';
    });

    document.querySelectorAll('#paidToday').forEach((div) => {
      div.innerHTML = paidToday.toFixed(2) + '&nbsp;€';
    });
    const paiementMensuelCartLabelContainer = document.querySelectorAll(
      '#paiementMensuelCartLabelContainer'
    );
    const paiementMensuelCartPriceContainer = document.querySelectorAll(
      '#paiementMensuelCartPriceContainer'
    );
    const apportInitialCartLabelContainer = document.querySelectorAll(
      '#apportInitialCartLabelContainer'
    );
    const apportInitialCartPriceContainer = document.querySelectorAll(
      '#apportInitialCartPriceContainer'
    );

    Object.keys(formated).forEach((productId) => {
      const product = formated[productId];
      const total = product.disabled
        ? product.priceTTC
        : product.rules[monthDuration] * product.quantity;
      setDetailText(
        paiementMensuelCartLabelContainer,
        productId,
        `${product.name} x&nbsp;${product.quantity}`
      );
      setDetailText(
        paiementMensuelCartPriceContainer,
        productId,
        `${product.disabled ? '0.00' : total.toFixed(2)}&nbsp;€`
      );
      setDetailText(
        apportInitialCartLabelContainer,
        productId,
        `${product.name} x&nbsp;${product.quantity}`
      );
      setDetailText(
        apportInitialCartPriceContainer,
        productId,
        `${total.toFixed(2)}&nbsp;€`
      );
    });

  }

   function calculateSumTotalPrice(duration = '36') {
    let total = 0;
    Object.keys(formated).forEach((productId) => {
      total +=
        formated[productId].rules[duration] * formated[productId].quantity;
    });
    return total;
  }
  function calculateTotalNonGreenLeaze() {
    let total = 0;
    Object.keys(formated).forEach((productId) => {
      total += formated[productId].disabled ? formated[productId].priceTTC : 0;
    });
    return total;
  }

    async function displayProductMainPrice(duration) {

      if(document.querySelector('.greenleaze-button')?.dataset?.price) {
          const prixHT = document.querySelector('.greenleaze-button').dataset.price /100 *5/6;
          const tva = 120 / 100;
          const rule = getRuleByProductPriceAndDuration(prixHT, +duration)
          const calculatePayment = parseRule(rule, {
      				tva,
      				prixHT,
      				duration
      			});
          const paiementMensuel = calculatePayment();
            document
            .querySelectorAll('.greenleaze-button-product')
            .forEach((btn) => {
              console.log(btn);
              btn.innerHTML = `${("" + paiementMensuel.toFixed(2)).replace(".", ",")}€ /mois <img style="margin-left: 10px;" src="{{ 'logo-greenleaze-slider.svg' | file_url }}" alt="greenleaze logo" width="13px" height="auto">`;
            });
          updateMonthlyPayment(rule);
          
      }
        document
        .querySelectorAll('.greenleaze-button-cart')
        .forEach((btn) => {
          console.log(btn);
          btn.innerHTML = `${calculateSumTotalPrice().toFixed(
            0
          )}€ /mois <img class="ml-007" src="{{ 'logo-greenleaze-fond-vert.svg' | file_url }}" width="100px" height="auto" style="margin-left:10px"/>`;
        });
      

    }

  
    async function addTo(variantId, quantity) {
      // Données à envoyer
      var data = {
        id: variantId,   // Identifiant de la variante
        quantity: quantity // Quantité
      };
    
      try {
        // Requête AJAX pour ajouter au panier
        let response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(data)
        });
    
        // Vérifier si la réponse est correcte
        if (!response.ok) {
          throw new Error('Erreur dans la requête: ' + response.statusText);
        }
    
        // Attendre la conversion de la réponse en JSON
        let responseData = await response.json();
        // Vous pouvez ici mettre à jour l'UI pour refléter l'ajout au panier
      } catch (error) {
        console.error('Erreur:', error);
      }
    }

	async function order() {
        setButtonLoading('.buttonOrder', true)
        console.log('order')
        const variantId = document.querySelector('.greenleaze-button').dataset.variantId;
		var cartContentsRes = await fetch(window.Shopify.routes.root + 'cart.js');
                    console.log('order2')

		let cartContents = await cartContentsRes.json();
      console.log('order2')

      if(!isCart) {
       const hasVariantId = cartContents.items.some(item => item.variant_id == variantId);

		if (!hasVariantId) {
            var ackShopify = await addTo(variantId,1)
              console.log("")
            cartContentsRes = await fetch(window.Shopify.routes.root + 'cart.js');
              console.log("")
    		cartContents = await cartContentsRes.json();
		}

        }
      console.log('order4')

		const shopDomain = "{{ shop.domain }}";
        console.log('send-card')
		let ack = await fetch("/apps/greenleaze-proxy/send-card", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				'Access-Control-Allow-Origin': '*',
			},
			body: JSON.stringify({
				"cartContents": JSON.stringify(cartContents),
				"shop": shopDomain
			}),
		});
     
         if(ack.ok)
          {
            const slider = document.getElementById('monthSlider-greenleaze');
            ack = await ack.json();
            console.log("ack", ack)
            if(ack?.message) {
                  setErrorMessage(ack?.message)
  
            }
            if(ack?.redirectUrl) {
              window.location.href = ack?.redirectUrl + '&duration=' + monthValues[slider.value];
            }
            }else {
            setErrorMessage("Une erreur s'est produite.")
            console.error('error during saved ', ack);
        }
            setButtonLoading('.buttonOrder', false)
	}

    // Open the modal

   function setDetailText(containers, dataKey, newText) {
    // Find the span with the class 'detail' within the container
    containers.forEach((container) => {
      let detailSpan = container.querySelector(
        `.detail[data-key="${dataKey}"]`
      );

      if (detailSpan) {
        // If the span exists, replace its text
        detailSpan.innerHTML = newText;
      } else {
        // If the span doesn't exist, create a new span and append it
        const newDetailSpan = document.createElement('span');
        newDetailSpan.className = 'detail';
        newDetailSpan.innerHTML = newText;
        newDetailSpan.setAttribute('data-key', dataKey);
        container.appendChild(newDetailSpan);
      }
    });
  }
async function getMetadatas(productsReduced) {
    const shopDomain = '{{ shop.domain }}';
    const metas = await fetch(
      '/apps/greenleaze-proxy/metadata?products=' + productsReduced,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      }
    );
    return metas;
  }

  async function getStocks(variantsReduced) {
    const shopDomain = '{{ shop.domain }}';
    const stocks = await fetch(
      '/apps/greenleaze-proxy/stocks?variants=' + variantsReduced,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      }
    );
    return stocks;
  }
   async function generateparsedRulesByProductsCartObject() {
      console.log('REFRESH CART');
      const cartContentsRes = await fetch(
        window.Shopify.routes.root + 'cart.js'
      );
      const cartContents = await cartContentsRes.json();
      const items = cartContents.items;
      if (items.length === 0) {
        console.error('No product in cart');
        return;
      }
      const products = items.reduce(
        (acc, item) => acc + (acc == '' ? '' : ',') + item.product_id,
        ''
      );
      const variants = items.reduce(
        (acc, item) => acc + (acc == '' ? '' : ',') + item.variant_id,
        ''
      );

      console.log('ITEMS', items);
      const metas = await (await getMetadatas(products)).json();

      const stocks = await (await getStocks(variants)).json();
      console.log('STOCKS', stocks);
      const formatedRules = {};
      items.forEach((item) => {
        let rules = {};
        const prixHT = ((item.final_price / 100) * 5) / 6;
        const tva = 120 / 100;
        console.log('META', metas[item.product_id]?.value, item);
        monthValues.forEach((duration) => {
          if (metas[item.product_id]?.value === 'true') {
            rules['' + duration] = 0;
          } else {
            rules['' + duration] = parseRule(
              getRuleByProductPriceAndDuration(prixHT, duration),
              { tva, prixHT, duration }
            )();
          }
        });
        formatedRules[item.variant_id] = {
          rules,
          name: item.product_title || item.title,
          quantity: item.quantity,
          disabled: metas[item.product_id]?.value === 'true',
          priceTTC: item.final_price / 100,
        };
      });

      formated = formatedRules;
      displayProductMainPrice(monthValues[monthValues.length - 1]);
      fetchPriceModalCart();
      console.log('formated', formated);
    }
   


	// Close the modal if the user clicks outside of it
	window.onclick = function (event) {
		var modal = document.querySelector('#modal-abonnement');
		// Check if the click was outside the modal content
		if (event.target == modal) {
			modal.style.display = 'none';F
		}
	};

   
   


</script>


